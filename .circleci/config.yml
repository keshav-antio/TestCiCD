version: 2.1
orbs:
  node: circleci/node@5

jobs:
  test-node:
    # Install node dependencies and run tests
    executor: node/default
    environment:
      JEST_JUNIT_OUTPUT_DIR: ./test-results/
    steps:
      - checkout
      - node/install-packages:
          pkg-manager: yarn     # We can use npm also instead of yarn 
      - run:
          command: yarn add jest-junit 
      - run:
          name: Run tests
          command: yarn test --ci --runInBand --reporters=default --reporters=jest-junit 
      - store_test_results:
          path: ./test-results/

  test-java:
    docker:
      - image: cimg/openjdk:17.0
    working_directory: ~/project/android
    steps:
      - checkout:
          path: ~/project
      - run:
          name: Calculate cache key
          command: |-
            find . -name 'pom.xml' -o -name 'gradlew*' -o -name '*.gradle*' | \
                    sort | xargs cat > /tmp/CIRCLECI_CACHE_KEY
      - restore_cache:
          key: cache-{{ checksum "/tmp/CIRCLECI_CACHE_KEY" }}
      - run:
          command: ./gradlew check
      - store_test_results:
          path: build/test-results
      - save_cache:
          key: cache-{{ checksum "/tmp/CIRCLECI_CACHE_KEY" }}
          paths:
            - ~/.gradle/caches
      - store_artifacts:
          path: build/reports

  deploy:
    # This is an example deploy job, not actually used by the workflow
    docker:
      - image: cimg/base:stable
    steps:
      # Replace this with steps to deploy to users
      - run:
          name: deploy
          command: '#e.g. ./deploy.sh'

workflows:
  build-and-test:
    jobs:
      - test-node:
          filters:
            branches:
              only:
                - main
      - test-java:
          filters:
            branches:
              only:
                - main
    # If you decide to include the deploy job, uncomment and configure it as follows:
    # - deploy:
    #     requires:
    #       - test-node
    #       - test-java
    #     filters:
    #       branches:
    #         only:
    #           - main                
