version: 2.1
orbs:
  node: circleci/node@5

jobs:
  test-node:
    # Install node dependencies and run tests
    executor: node/default
    environment:
      JEST_JUNIT_OUTPUT_DIR: ./test-results/
    steps:
      - checkout
      - node/install-packages:
          pkg-manager: yarn     # We switched from npm to yarn
      - run:
          command: yarn add jest-junit 
      - save_cache:                # Cache the node_modules directory
          key: node-modules-{{ checksum "yarn.lock" }}
          paths:
            - ./node_modules
      - run:
          name: Run tests
          command: yarn test --ci --runInBand --reporters=default --reporters=jest-junit 
      - store_test_results:
          path: ./test-results/

  test-java:
    docker:
      - image: cimg/openjdk:17
      - image: cimg/android:2024.10
    working_directory: ~/project/android
    environment:
      ANDROID_HOME: ~/android-sdk  # Use home directory for Android SDK
      PATH: ~/android-sdk/cmdline-tools/latest/bin:$PATH
    steps:
      - checkout:
          path: ~/project
      # - run:
      #     name: Install Utilities
      #     command: sudo apt-get update && sudo apt-get install -y unzip curl  # Install unzip and curl
      - run:
          name: Create local.properties
          command: echo "sdk.dir=$ANDROID_HOME" > local.properties   # Create local.properties with SDK path
      # - run:
      #     name: Install Android SDK Command Line Tools
      #     command: |
      #       mkdir -p ~/android-sdk/cmdline-tools/latest
      #       curl -o sdk-tools-linux.zip https://dl.google.com/android/repository/commandlinetools-linux-7302050_latest.zip
      #       unzip sdk-tools-linux.zip -d ~/android-sdk/cmdline-tools/latest
      #       yes | ~/android-sdk/cmdline-tools/latest/bin/sdkmanager --licenses
      #       ~/android-sdk/cmdline-tools/latest/bin/sdkmanager "platform-tools" "platforms;android-30"  # Adjust the Android version if needed
      - run:
          name: Install curl
          command: |
            apt-get update && apt-get install -y curl
      - run:
          name: Install Node.js and Yarn
          command: |
            curl -sL https://deb.nodesource.com/setup_18.x | bash -  # Install Node.js without sudo
            apt-get update
            apt-get install -y nodejs
            npm install -g yarn  # Install Yarn globally
      - restore_cache:             # Restore the node_modules cache
          key: node-modules-{{ checksum "../yarn.lock" }}
      - run:
          name: Install Node Dependencies
          command: yarn install --frozen-lockfile     # Ensure node modules are installed
      - run:
          name: Calculate cache key
          command: |-
            find . -name 'pom.xml' -o -name 'gradlew*' -o -name '*.gradle*' | \
                    sort | xargs cat > /tmp/CIRCLECI_CACHE_KEY
      - restore_cache:
          key: cache-{{ checksum "/tmp/CIRCLECI_CACHE_KEY" }}
      - run:
          name: Grant permission to gradlew
          command: chmod +x ./gradlew    # Fix permission issue for gradlew
      - run:
          name: Clean project
          command: ./gradlew clean       # Clean the project before running tests
      - run:
          command: ./gradlew check       # Run tests
      - run:
          name: Build Android APK
          command: ./gradlew assembleRelease      # Build APK
      - store_artifacts:                          # Save the APK as an artifact for download
          path: android/app/build/outputs/apk/release/app-release.apk
      - store_test_results:
          path: build/test-results
      - save_cache:
          key: cache-{{ checksum "/tmp/CIRCLECI_CACHE_KEY" }}
          paths:
            - ~/.gradle/caches
      - store_artifacts:
          path: build/reports

  # New job for CodePush deployment
  # deploy:
  #   docker:
  #     - image: circleci/node:18  # Use a Node.js image for the deployment
  #   steps:
  #     - checkout
  #     - run:
  #       name: Install Dependencies
  #       command: yarn install  # Install dependencies
  #     - run:
  #       name: Install AppCenter CLI
  #       command: npm install -g appcenter-cli  # Install the AppCenter CLI for CodePush
  #     - run:
  #       name: Release to CodePush
  #       command: appcenter codepush release-react -a <ownerName>/<appName> -d Production  # Replace with your AppCenter details

workflows:
  build-and-test:
    jobs:
      - test-node:
          filters:
            branches:
              only:
                - main     # Will run only for main branch
      - test-java:
          filters:
            branches:
              only:
                - main     # Will run only for main branch
    # If you decide to include the deploy job, uncomment and configure it as follows:
    # - deploy:
    #     requires:
    #       - test-node
    #       - test-java
    #     filters:
    #       branches:
    #         only:
    #           - main                 # Deploy only on main branch

